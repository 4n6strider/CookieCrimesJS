<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <style>
table, td {
    border: 1px solid black;
}
</style>
  <title>ChromeWitness</title>
  <body>
<table id="myTable"></table>
  </body>
</iframe>
<script>

var webSocketDebuggerUrl;
var port = 9222;
var result;
var targetID;
var connection;
var request = new XMLHttpRequest();
request.open("GET", "http://localhost:" + port + "/json");
request.responseType = 'json';
request.send();
request.onload = function() {
	webSocketDebuggerUrl = request.response[0].webSocketDebuggerUrl;
	console.log(webSocketDebuggerUrl);
 
	connection = new WebSocket(webSocketDebuggerUrl);
	
	// When the connection is open, send some data to the server
	connection.onopen = function () {
		connection.send('{"id": 1000, "method": "Target.createTarget", "params": {"url": "http://www.hp.com"}}');
		connection.send('{"id": 1001, "method": "Target.createTarget", "params": {"url": "http://www.rackspace.com"}}');
		connection.send('{"id": 1002, "method": "Target.createTarget", "params": {"url": "http://walmart.com"}}');
		connection.send('{"id": 1003, "method": "Target.createTarget", "params": {"url": "http://www.amazon.com"}}');

	};
	
	// Log errors
	connection.onerror = function (error) {
	  console.log('WebSocket Error ' + error);
	};
	
	// Log messages from the server
	connection.onmessage = function (e) {
		//find the targetID
		var respJ = JSON.parse(e.data);
		if (respJ.result.targetId != undefined){
			targetID = respJ.result.targetId;
		    getScreenshot(targetID, respJ.id).then(() => {});
		}
	};	
}

function getScreenshot (targetID, requestID) {
 return new Promise(function(resolve, reject) {

	var connection2 = new WebSocket("ws://localhost:9222/devtools/page/" + targetID);
	var title;
	var url;
	


	// Log errors
	connection2.onerror = function (error) {
		console.log('WebSocket Error ' + error);
	};
	
	// Log messages from the server
	connection2.onmessage = function (e) {
		if (e.data != undefined) {

			resultJ = JSON.parse(e.data);

			if ((resultJ.id != undefined) && (resultJ.id == 3)) {
				title = resultJ.result.targetInfo.title;
				url = resultJ.result.targetInfo.url;
				console.log("title: " + title);
				console.log("url: " + url);
			}

			if ((resultJ.id != undefined) && (resultJ.id == 2)) {
			
			
			
				var blobstr = ('<img src="data:image/png;base64, ' + resultJ.result.data + '"/>');

				var table = document.getElementById("myTable");
				var row = table.insertRow(-1);
				var cell1 = row.insertCell(0);
				var cell2 = row.insertCell(1);
				a = document.createElement('a');
				a.href =  url;
				a.innerHTML = url;
				var para = document.createElement("p");
				var node = document.createTextNode(title);
				para.appendChild(node);
				cell1.appendChild(para);
				cell1.appendChild(a);
				cell2.innerHTML = blobstr;
				
				
				//close the tab
				var constr = '{"id": ' + requestID + ', "method": "Page.close"}'; 
				connection2.send(constr);
				resolve("it worked");
			}
		}
	};
	
	//When the connection is open, send some data to the server
	connection2.onopen = function () {

		//Don't do anything right away because we need to wait for the page to load
		sleep(2000).then(() => {
			connection2.send('{"id": 3, "method": "Target.getTargetInfo", "params": {"targetId": "' + targetID + '"}}');
			connection2.send('{"id": 2, "method": "Page.captureScreenshot"}');
			
		});

		
	};
  });
}

// sleep time expects milliseconds
function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}




</script>
  
  
  </body></html>
